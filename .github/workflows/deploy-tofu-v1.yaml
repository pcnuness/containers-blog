name: Deploy Infra with OpenTofu v1
description: 'Create Resource in AWS using OpenTofu v1'

on:
  workflow_dispatch:
    inputs:
      stage:
        required: true
        default: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      WORK_DIR: eks-adr-kubernetes/terraform
      AWS_REGION: us-east-1

    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu-version: 1.9.0

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Obter AWS Account ID
        id: aws
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "account_id=$ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Criar bucket do backend se não existir
        run: |
          BUCKET="${{ steps.aws.outputs.account_id }}-iac-opentofu-backend"
          REGION="${{ env.AWS_REGION }}"
          echo "bucket_name=$BUCKET" >> $GITHUB_ENV
      
          if aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            echo "✅ Bucket $BUCKET já existe"
          else
            echo "🚀 Criando bucket $BUCKET"
            if [ "$REGION" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET"
            else
              aws s3api create-bucket \
                --bucket "$BUCKET" \
                --region "$REGION" \
                --create-bucket-configuration LocationConstraint="$REGION"
            fi
          fi


      ######################################
      # 🔍 TFLint com suporte a .tfvars
      ######################################
      - name: Instalar TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          echo "$HOME/.tflint/bin" >> $GITHUB_PATH

      - name: Rodar TFLint
        run: |
          tflint --recursive --var-file=./environments/${{ github.event.inputs.stage }}.tfvars
        working-directory: ${{ env.WORK_DIR }}

      ######################################
      # 🔐 Checkov com tfvars
      ######################################
      - name: Instalar Checkov
        run: pip install checkov

      - name: Rodar Checkov
        run: |
          checkov -d . \
            --framework terraform \
            --quiet \
            --var-file environments/${{ github.event.inputs.stage }}.tfvars
        working-directory: ${{ env.WORK_DIR }}

      ######################################
      # 💸 Infracost com tfvars
      ######################################
      - name: Instalar Infracost
        run: |
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
          echo "$HOME/.infracost/bin" >> $GITHUB_PATH

      - name: Autenticar Infracost
        env:
          INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        run: infracost configure set api_key $INFRACOST_API_KEY

      - name: Gerar estimativa de custo
        run: |
          infracost breakdown --path=. \
            --terraform-var-file="environments/${{ github.event.inputs.stage }}.tfvars" \
            --format table \
            --out-file infracost.txt
        working-directory: ${{ env.WORK_DIR }}

      - name: Publicar custo no resumo
        run: |
          echo "### 💰 Estimativa de custo (Infracost)" >> $GITHUB_STEP_SUMMARY
          cat infracost.txt >> $GITHUB_STEP_SUMMARY
        working-directory: ${{ env.WORK_DIR }}

      ######################################
      # 🧪 OpenTofu validate/plan/apply
      ######################################

      - name: Inicializar OpenTofu com backend S3
        run: |
          KEY_PATH="${{ github.repository }}/eks-adr-kubernetes/terraform/terraform.tfstate"
          tofu init \
            -backend-config="bucket=${{ env.bucket_name }}" \
            -backend-config="key=$KEY_PATH" \
            -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu validate
        run: |
          tofu validate -no-color
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu plan
        run: |
          tofu plan -var-file="environments/${{ github.event.inputs.stage }}.tfvars" -out=tfplan
        working-directory: ${{ env.WORK_DIR }}

      - name: tofu apply
        run: |
          tofu apply -auto-approve tfplan
        working-directory: ${{ env.WORK_DIR }}